#!/usr/bin/env python2.7
import argparse
import sys
import os
import shlex

BASE_DIR    = os.path.dirname(os.path.realpath(__file__))
TRUFFLE_DIR = BASE_DIR + '/libs/truffle'
JAVA_HOME   = os.getenv('JAVA_HOME',  None)
JVMCI_BIN   = os.getenv('JVMCI_BIN',  None)
GRAAL_HOME  = os.getenv('GRAAL_HOME',  None)
GRAAL_FLAGS = os.getenv('GRAAL_FLAGS', None)

##
## Defining Argument Parsing
##
parser = argparse.ArgumentParser(
    description='Helper script to run GraalSOM with/without Graal')

parser.add_argument('-d', '--debug', help='wait for debugger to attach',
                    dest='debug', action='store_true', default=False)
parser.add_argument('-t', '--num-threads', help='number of threads to be used',
                    dest='threads', default=None)
parser.add_argument('-b', '--benchmark', help='run graalsom for benchmarks',
                    dest='benchmarks', action='store_true', default=False)

explore = parser.add_argument_group('Explore', 'Investigate Execution')
explore.add_argument('-i', '--igv', help='dump compilation details to IGV',
                    dest='igv', action='store_true', default=False)
explore.add_argument('-im', '--igv-parsed-methods', help='dump methods after parsing to IGV',
                    dest='igv_methods', action='store_true', default=False)
explore.add_argument('-if', '--igv-to-file', help='dump compilation details to file to be loaded by IGV',
                    dest='igv_to_file', action='store_true', default=False)
explore.add_argument('-io', '--igv-only', help='only dump named method, use of * allowed. Uses Invokable.toString()',
                    dest='only_igv', default=None)
explore.add_argument('-l', '--low-level', help='enable low-level optimization output',
                    dest='low_level', action='store_true', default=False)
explore.add_argument('-ti', '--trace-invalidation', help='trace assumption invalidation and transfers to interpreter',
                    dest='trace_invalidation', action='store_true', default=False)
explore.add_argument('-w', '--perf-warnings', help='enable performance warnings',
                    dest='perf_warnings', action='store_true', default=False)
explore.add_argument('-f', '--fail-on-missing-optimizations', help='fail execution on missing optimizations',
                    dest='fail_missing_opts', action='store_true', default=False)
explore.add_argument('-v', '--visual-vm', help='connect to VisualVM for profiling',
                    dest='visual_vm', action='store_true', default=False)

profile = parser.add_argument_group('Profile', 'Profile Execution')
profile.add_argument('-gp', '--graal-profile', help='enable Graal-level profiling after warmup',
                    dest='graal_profile', action='store_true', default=False)
profile.add_argument('-ga', '--graal-profile-allocations', help='enable Graal-level profiling after warmup, and profile allocations',
                    dest='graal_profile_allocations', action='store_true', default=False)
profile.add_argument('-gi', '--graal-profile-intervals', help='enable Graal-level profiling after certain time intervals',
                    dest='graal_profile_timed', action='store_true', default=False)
profile.add_argument('-gb', '--graal-branch-profile', help='enable Graal-level branch profiling',
                    dest='graal_branch_profile', action='store_true', default=False)
profile.add_argument('-tp', '--truffle-profile', help='enable Graal-level profiling after warmup',
                    dest='truffle_profile', action='store_true', default=False)

parser.add_argument('-o', '--only', help='only compile give methods, comma separated list',
                    dest='only_compile', default=None)
parser.add_argument('-A', '--no-assert', help='execute with assertions disabled',
                    dest='assert_', action='store_false', default=True)
parser.add_argument('-B', '--no-background', help='disable background compilation',
                    dest='background_compilation', action='store_false', default=True)
parser.add_argument('-P', '--no-pinning', help='disable pinning of threads to cores',
                    dest='use_pinning', action='store_false', default=True)
parser.add_argument('-C', '--no-compilation', help='disable Truffle compilation',
                    dest='no_compilation', action='store_true', default=False)
parser.add_argument('-G', '--interpreter', help='run without Graal',
                    dest='interpreter', action='store_true', default=False)
parser.add_argument('-EG', '--no-embedded-graal', help='run without the embedded Graal',
                    dest='embedded_graal', action='store_false', default=True)
parser.add_argument('-LG', '--no-libgraal', help='run without using the embedded libgraal. Settings like JVMCI_BIN and GRAAL_HOME are ignored as long as libgraal is not disabled.',
                    dest='use_libgraal', action='store_false', default=True)
parser.add_argument('-X', '--java-interpreter', help='run without Graal, and only the Java interpreter',
                    dest='java_interpreter', action='store_true', default=False)
parser.add_argument('-T', '--no-trace', help='do not print truffle compilation info',
                    dest='no_trace', action='store_false', default=True)
parser.add_argument('--no-graph-pe', help='disable Graph PE',
                    dest='graph_pe', action='store_false', default=True)

parser.add_argument('-vv', '--verbose', action='store_true', default=False,
                    dest='verbose', help="print command-line before executing")
parser.add_argument('--print-graal-options', action='store_true', default=False,
                    dest='print_graal_options', help="print all Graal options")

parser.add_argument('-J', help="Java VM Argument prefix",
                    dest="java_args", action='append')
parser.add_argument('-D', help="define a Java property",
                    dest="java_properties", action='append')


parser.add_argument('args', nargs=argparse.REMAINDER,
                    help='arguments passed to GraalSOM')

if len(sys.argv) < 1:
    parser.print_help()
    sys.exit(1)

args = parser.parse_args()

if args.java_interpreter:
    args.interpreter = True

if args.interpreter:
    args.use_libgraal = False

# Determine JVM to be used
java_bin = None

if not args.use_libgraal:
    if JVMCI_BIN:
      java_bin = JVMCI_BIN
    if not java_bin and GRAAL_HOME and os.path.isfile(GRAAL_HOME + '/bin/java'):
      java_bin = GRAAL_HOME + '/bin/java'

if not java_bin:
    # use local JVMCI, which ant already needed
    local_jvmci_bin = BASE_DIR + '/libs/jvmci'
    if sys.platform == 'darwin':
      local_jvmci_bin += '/Contents/Home'
    local_jvmci_bin += '/bin/java'
    if os.path.isfile(local_jvmci_bin):
      java_bin = local_jvmci_bin

if not java_bin and JAVA_HOME:
  java_bin = JAVA_HOME + '/bin/java'

if not java_bin:
  java_bin = "java"

JAVA_MAJOR_VERSION = None
try:
  j_ver_str = os.popen(java_bin + " -version 2>&1").read()
  j_arr = j_ver_str.split("\"")
  if j_arr[1].startswith("1.8"):
    JAVA_MAJOR_VERSION = 8
  else:
    JAVA_MAJOR_VERSION = int(j_arr[1].split(".")[0])
except:
  pass

if not args.interpreter and not java_bin.startswith(BASE_DIR + '/libs/jvmci') and (not JAVA_MAJOR_VERSION or JAVA_MAJOR_VERSION < 9):
  print "No compatible JDK found. Please set the GRAAL_HOME or JVMCI_BIN environment variables."
  sys.exit(1)

if args.use_libgraal:
  from subprocess import check_output, STDOUT, CalledProcessError
  try:
    libgraal_jdk_home = check_output(
      [BASE_DIR + '/libs/mx/mx', '--primary-suite-path', BASE_DIR + '/libs/truffle/vm', 'graalvm-home'],
      stderr=STDOUT,
      env = {
        'JAVA_HOME':            java_bin.replace('/bin/java', ''),
        # REM: This needs to match build.xml:libgraal-jdk
        'DYNAMIC_IMPORTS':      '/substratevm,/tools,/truffle,/sdk,/compiler',
        'FORCE_BASH_LAUNCHERS': 'true',
        'DISABLE_LIBPOLYGLOT':  'true',
        'EXCLUDE_COMPONENTS':   'svmag,nju,nic,ni,nil'
      })
    java_bin = libgraal_jdk_home.strip() + '/bin/java'
  except CalledProcessError as e:
    print "Failed to determine location of libgraal"
    print e.output
    sys.exit(1)

##
## Defining Necessary Parameter Bits
##

CLASSPATH = (BASE_DIR + '/build/classes:'
           + TRUFFLE_DIR + '/truffle/mxbuild/dists/jdk1.8/truffle-debug.jar:'
           + BASE_DIR + '/build/som.jar'
)

BOOT_CLASSPATH = ('-Xbootclasspath/a:'
             + TRUFFLE_DIR + '/sdk/mxbuild/dists/jdk1.8/graal-sdk.jar:'
             + TRUFFLE_DIR + '/truffle/mxbuild/dists/jdk1.8/truffle-api.jar:'
             + BASE_DIR + '/libs/affinity.jar:'
            + BASE_DIR + '/libs/slf4j-api.jar:'
            + BASE_DIR + '/libs/slf4j-simple.jar:'
            + BASE_DIR + '/libs/jna-platform.jar:'
            + BASE_DIR + '/libs/jna.jar')

if args.use_libgraal:
  GRAAL_JAVA_8_FLAGS = ['-XX:+UseJVMCICompiler', '-XX:+UseJVMCINativeLibrary',
    '-XX:-UseJVMCIClassLoader', '-Dgraalvm.locatorDisabled=true']
  GRAAL_JVMCI_FLAGS = []
else:
  GRAAL_JAVA_8_FLAGS = ['-Djvmci.Compiler=graal',
    '-Djvmci.class.path.append=' + TRUFFLE_DIR + '/compiler/mxbuild/dists/jdk1.8/graal.jar']
  GRAAL_JVMCI_FLAGS = ['-XX:+UnlockExperimentalVMOptions', '-XX:+EnableJVMCI', '-XX:-UseJVMCICompiler']

GRAAL_JAVA_9_FLAGS = [
  '--module-path=' + TRUFFLE_DIR + '/sdk/mxbuild/modules/org.graalvm.graal_sdk.jar:' +
       TRUFFLE_DIR + '/truffle/mxbuild/modules/com.oracle.truffle.truffle_api.jar',
  '--upgrade-module-path=' + TRUFFLE_DIR + '/compiler/mxbuild/modules/jdk.internal.vm.compiler.jar']

SOM_ARGS = ['som.Launcher', '-cp', 'Smalltalk']

if args.benchmarks:
	SOM_ARGS = ['som.Launcher', '-cp', 'Smalltalk:Examples/Benchmarks/DeltaBlue:Examples/Benchmarks/GraphSearch:Examples/Benchmarks/GCBenchmark:Examples/Benchmarks/Json:Examples/Benchmarks/LanguageFeatures:Examples/Benchmarks/NBody:Examples/Benchmarks/Polymorphism:Examples/Benchmarks/Richards']

# == Compiler Settings
TWEAK_INLINING = ['-Dpolyglot.engine.CompilationThreshold=191',
                  '-Dpolyglot.engine.InliningMaxCallerSize=10000',
                  '-Dpolyglot.engine.SplittingMaxCalleeSize=100000']

JAVA_ARGS = ['-server', '-XX:+UseThreadPriorities']

if JAVA_MAJOR_VERSION == 8:
  JAVA_ARGS += ['-d64']
  GRAAL_EMBEDDED_FLAGS = GRAAL_JAVA_8_FLAGS

if JAVA_MAJOR_VERSION > 8:
  GRAAL_EMBEDDED_FLAGS = GRAAL_JAVA_9_FLAGS

##
## Processing Parameters and Assembling Command Line
##

if not args.interpreter and GRAAL_FLAGS:
    flags = shlex.split(str.strip(GRAAL_FLAGS))
else:
    flags = []

if args.interpreter:
    flags += ['-Dtruffle.TruffleRuntime=com.oracle.truffle.api.impl.DefaultTruffleRuntime']
else:
  flags += GRAAL_JVMCI_FLAGS
  if args.embedded_graal:
    flags += GRAAL_EMBEDDED_FLAGS

# Handle executable names
if sys.argv[0].endswith('fast'):
    args.assert_ = False
    args.no_trace = True
if sys.argv[0].endswith('debug'):
    args.perf_warnings = True
    args.background_compilation = False

if args.only_igv or args.igv_methods:
    args.igv = True

if args.debug:
    flags += ['-Xdebug',
              '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000']
if not args.interpreter and (args.igv or args.igv_to_file):
    flags += ['-Dgraal.Dump=Truffle,TruffleTree:2']
if  not args.interpreter and args.only_igv:
    flags += ['-Dpolyglot.engine.MethodFilter=' + args.only_igv]
if not args.interpreter and args.igv_to_file:
    flags += ['-Dpolyglot.engine.PrintIdealGraphFile=true']
if args.igv_methods:
    flags += ['-Dsom.igvDumpAfterParsing=true']
if args.low_level:
    flags += ['-XX:+UnlockDiagnosticVMOptions', '-XX:+LogCompilation',
              '-XX:+TraceDeoptimization']
if not args.interpreter and (args.graal_profile or args.graal_profile_allocations or args.graal_profile_timed):
    flags += ['-XX:JVMCICounterSize=5000', '-Dpolyglot.engine.ProfileCompiledMethods=true',
              '-DProfileCompiledMethodsPhase.WITH_SECTION_HEADER=true']
    if args.graal_profile_allocations:
        flags += ['-Dpolyglot.engine.ProfileAllocations=true']
    if args.graal_profile_timed:
        flags += ['-Dpolyglot.engine.TimedDynamicCounters=1000']
    if args.graal_profile:
        flags += ['-Dpolyglot.engine.BenchmarkDynamicCounters=out,completed,total']

if not args.interpreter and args.graal_branch_profile:
    flags += ['-Dpolyglot.engine.InstrumentBranches=true',
              '-Dpolyglot.engine.InstrumentBranchesFilter=*',
              '-Dpolyglot.engine.InstrumentBranchesPerInlineSite=true']

if args.truffle_profile:
    flags += ['-Dtruffle.profiling.enabled=true']
    SOM_ARGS += ['--profile']

if not args.interpreter and args.perf_warnings:
    flags += ['-Dpolyglot.engine.CompilationExceptionsAreFatal=true',
              '-Dpolyglot.engine.TracePerformanceWarnings=all',
              '-Dpolyglot.engine.TraceCompilation=true',
              '-Dpolyglot.engine.TraceCompilationDetails=true']
if not args.fail_missing_opts:
    flags += ['-DfailOnMissingOptimization=true']
if not args.interpreter and args.trace_invalidation:
    flags += ['-Dpolyglot.engine.TraceTransferToInterpreter=true',
              '-Dpolyglot.engine.TraceAssumptions=true']
if not args.interpreter and args.only_compile:
    flags.append("-Dpolyglot.engine.CompileOnly=%s" % args.only_compile)
if args.visual_vm:
    flags += ['-agentpath:/Users/smarr/Downloads/visualvm_143/profiler/lib/deployed/jdk16/mac/libprofilerinterface.jnilib=/Users/smarr/Downloads/visualvm_143/profiler/lib,5140']
if args.assert_:
    flags += ['-esa', '-ea']
else:
    flags += ['-dsa', '-da']
if not args.interpreter and not args.background_compilation:
    flags += ['-Dpolyglot.engine.BackgroundCompilation=false']
if not args.interpreter and args.no_compilation:
    flags.append('-Dpolyglot.engine.CompileOnly=__FAKE_METHOD_NON_EXISTING__')
if not args.interpreter and args.no_trace and not args.perf_warnings:
    flags += ['-Dpolyglot.engine.TraceInlining=false', '-Dpolyglot.engine.TraceCompilation=false']
if not args.interpreter and not args.graph_pe:
    flags += ['-Dpolyglot.engine.GraphPE=false']
if args.threads:
    flags += ['-Dsom.threads=%s' % args.threads ]
if args.java_interpreter:
    flags += ['-Xint']
if args.print_graal_options:
    flags += ['-XX:+JVMCIPrintProperties']

if not args.interpreter:
    flags += ['-Dpolyglot.engine.LanguageAgnosticInlining=false']

if args.java_properties:
    flags += ['-D' + property for property in args.java_properties]

if args.java_args:
    JAVA_ARGS += ['-' + property for property in args.java_args]

if args.use_pinning:
  ## check whether there are any known restrictions to core usage
  ## that needs to be considered for pinning
  core_set = os.environ.get('REBENCH_DENOISE_CORE_SET', None)
  if core_set:
    ## calculate the mask for cores, as hexadecimal representation
    core_set = core_set.split("-")
    core_set[0] = int(core_set[0])
    core_set[1] = int(core_set[1])
    bit_mask = 0
    for c in range(core_set[0], core_set[1] + 1):
      bit_mask += 1 << c
    flags += ['-Daffinity.reserved=' + hex(bit_mask).lstrip("0x")]
else:
  flags += ['-Dsom.usePinning=false']

all_args = JAVA_ARGS + ['-classpath', CLASSPATH] + [BOOT_CLASSPATH] + flags + SOM_ARGS + args.args

if args.verbose:
    print "CMD: " + java_bin + ' ' + ' '.join(all_args)

env = dict(os.environ)
env['JVMCI_VERSION_CHECK'] = 'ignore'

os.execvpe(java_bin, all_args, env)
